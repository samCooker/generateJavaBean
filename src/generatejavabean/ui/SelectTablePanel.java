/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package generatejavabean.ui;

import java.awt.CardLayout;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.ListModel;
import javax.swing.ListSelectionModel;

import org.beetl.core.Template;

import generatejavabean.configbeans.ConnectionData;
import generatejavabean.configbeans.JavaBeanData;
import generatejavabean.popup.actions.GenerateJavaBeanAction;
import generatejavabean.tools.ConfigTools;
import generatejavabean.tools.DatabaseQueryTool;
import generatejavabean.tools.TemplateTool;

/**
 *
 * @author Administrator
 */
@SuppressWarnings("serial")
public class SelectTablePanel extends javax.swing.JPanel {

    /**
     * Creates new form JPanelSelected
     */
    public SelectTablePanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        labelSelected = new javax.swing.JLabel();
        radioJavaBean = new javax.swing.JRadioButton();
        radioRepository = new javax.swing.JRadioButton();
        radioService = new javax.swing.JRadioButton();
        btnPrevious = new javax.swing.JButton();
        panelTables = new javax.swing.JScrollPane();
        tablesList = new javax.swing.JList<>();
        btnFinish = new javax.swing.JButton();
        labelTables = new javax.swing.JLabel();
        btnClose2 = new javax.swing.JButton();
        panelSelected = new javax.swing.JScrollPane();
        selectedList = new javax.swing.JList<>();
        isNewBeanFolder = new javax.swing.JCheckBox();
        isNewRepoFolder = new javax.swing.JCheckBox();
        isNewServiceFolder = new javax.swing.JCheckBox();
        folderRepoName = new javax.swing.JTextField();
        folderServiceName = new javax.swing.JTextField();
        folderBeanName = new javax.swing.JTextField();

        labelSelected.setText("Selected");

        radioJavaBean.setText("create javaBean");
        radioJavaBean.setSelected(javaBeanSelected);

        radioRepository.setText("create repository");
        radioRepository.setSelected(repositorySelected);

        radioService.setText("create service");
        radioService.setSelected(serviceSelected);

        btnPrevious.setText("pervious");
        btnPrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreviousActionPerformed(evt);
            }
        });

        // 可选列表鼠标点击事件
        tablesList.addMouseListener(new MouseListener() {
            @Override
            public void mouseReleased(MouseEvent e) {
            }

            @Override
            public void mousePressed(MouseEvent e) {

            }

            @Override
            public void mouseExited(MouseEvent e) {

            }

            @Override
            public void mouseEntered(MouseEvent e) {

            }

            @Override
            public void mouseClicked(MouseEvent e) {
                // e.getButton()：1 左键 3 右键
                final List<String> selectedValuesList = tablesList.getSelectedValuesList();
                ListModel<String> selectedItems = selectedList.getModel();
                for (int i = 0; i < selectedItems.getSize(); i++) {
                    if (!selectedValuesList.contains(selectedItems.getElementAt(i))) {
                        selectedValuesList.add(selectedItems.getElementAt(i));
                    }
                }
                selectedList.setModel(new javax.swing.AbstractListModel<String>() {
                    public int getSize() {
                        return selectedValuesList.size();
                    }

                    public String getElementAt(int i) {
                        return selectedValuesList.get(i);
                    }
                });
            }
        });

        // 已选列表鼠标点击事件
        selectedList.addMouseListener(new MouseListener() {
            @Override
            public void mouseReleased(MouseEvent e) {

            }

            @Override
            public void mousePressed(MouseEvent e) {

            }

            @Override
            public void mouseExited(MouseEvent e) {

            }

            @Override
            public void mouseEntered(MouseEvent e) {

            }

            @Override
            public void mouseClicked(MouseEvent e) {
                String selectedValue = selectedList.getSelectedValue();
                if (selectedValue != null) {
                    ListModel<String> selectedItems = selectedList.getModel();
                    final List<String> selectedValuesList = new ArrayList<>();
                    for (int i = 0; i < selectedItems.getSize(); i++) {
                        if (!selectedValue.equals(selectedItems.getElementAt(i))) {
                            selectedValuesList.add(selectedItems.getElementAt(i));
                        }
                    }
                    selectedList.setModel(new javax.swing.AbstractListModel<String>() {
                        public int getSize() {
                            return selectedValuesList.size();
                        }

                        public String getElementAt(int i) {
                            return selectedValuesList.get(i);
                        }
                    });
                }
            }
        });

        panelTables.setViewportView(tablesList);
        selectedList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        panelSelected.setViewportView(selectedList);

        btnFinish.setText("finish");
        btnFinish.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFinishActionPerformed(evt);
            }
        });

        labelTables.setText("Tables");

        btnClose2.setText("close");
        btnClose2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClose2ActionPerformed(evt);
            }
        });

        isNewBeanFolder.setText("new folder");

        isNewRepoFolder.setText("new folder");

        isNewServiceFolder.setText("new folder");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                        layout.createParallelGroup(
                                        javax.swing.GroupLayout.Alignment.LEADING).addGroup(
                                                        layout.createSequentialGroup().addGroup(layout
                                                                        .createParallelGroup(
                                                                                        javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addGroup(layout.createSequentialGroup().addContainerGap()
                                                                                        .addComponent(panelTables, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE).addGroup(
                                                                                                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addGap(162, 162, 162).addComponent(labelSelected))
                                                                                                                        .addGroup(layout.createSequentialGroup().addGap(48, 48, 48)
                                                                                                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                                                                                                        .addGroup(layout.createSequentialGroup().addComponent(btnPrevious).addGap(32, 32, 32).addComponent(btnFinish).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                                                                                                                        .addComponent(btnClose2))
                                                                                                                                                        .addComponent(radioJavaBean).addComponent(panelSelected, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                                                                                        .addGroup(layout.createSequentialGroup()
                                                                                                                                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(radioRepository).addComponent(radioService)).addGap(18, 18,
                                                                                                                                                                                        18)
                                                                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                                                                        .addGroup(layout.createSequentialGroup().addComponent(isNewRepoFolder, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE).addGap(18, 18, Short.MAX_VALUE).addComponent(folderRepoName, javax.swing.GroupLayout.PREFERRED_SIZE, 72,
                                                                                                                                        javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                        .addGroup(layout.createSequentialGroup().addComponent(isNewBeanFolder).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(folderBeanName, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                        .addGroup(layout.createSequentialGroup().addComponent(isNewServiceFolder).addGap(30, 30, 30).addComponent(folderServiceName, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE).addGap(0, 0, Short.MAX_VALUE))))))).addGap(17, 17, 17))
                        .addGroup(layout.createSequentialGroup().addGap(76, 76, 76).addComponent(labelTables))).addGap(28, 28, 28)));
        layout.setVerticalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
                                                        layout.createSequentialGroup()
                                                                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(
                                                                                        labelTables)
                                                                        .addPreferredGap(
                                                                                        javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                                                        .addGroup(layout.createSequentialGroup().addComponent(panelTables, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE).addContainerGap()).addGroup(
                                                                                                        layout.createSequentialGroup().addComponent(labelSelected).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addComponent(panelSelected, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE).addGap(34, 34, 34)
                                                                                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(radioJavaBean).addComponent(isNewBeanFolder).addComponent(folderBeanName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                                                                                        javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                                                                        .addGap(18, 18, 18)
                                                                                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(radioRepository).addComponent(isNewRepoFolder).addComponent(folderRepoName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                                                                                        javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                                                                        .addGap(18, 18, 18)
                                                                                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(radioService).addComponent(isNewServiceFolder).addComponent(folderServiceName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                                                                                        javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(btnPrevious).addComponent(btnFinish).addComponent(btnClose2))
                                                                                                                        .addGap(41, 41, 41)))));
    }// </editor-fold>

    /**
     * 返回上一个panel
     * 
     * @param evt
     */
    private void btnPreviousActionPerformed(java.awt.event.ActionEvent evt) {
        CardLayout cardLayout = (CardLayout) this.getParent().getLayout();
        cardLayout.show(this.getParent(), GenerateJavaBeanAction.DB_PANEL_NAME);
    }

    /**
     * 确定生成文件按钮
     * 
     * @param evt
     */
    private void btnFinishActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            TemplateTool tool = new TemplateTool();

            Calendar c = Calendar.getInstance();
            String dateFmt = new SimpleDateFormat("yyyy年MM月dd日 ").format(c.getTime());

            ListModel<String> selectedTables = selectedList.getModel();

            if (selectedTables.getSize() == 0) {
                showError("至少选择一个表名。");
                return;
            }

            if (radioJavaBean.isSelected()) {
                String path = ConfigTools.getFolderPath();
                if (isNewBeanFolder.isSelected()) {
                    String folderName = folderBeanName.getText().length() == 0 ? TemplateTool.DEFAULT_BEAN_FOLDER : folderBeanName.getText();
                    path = path + File.separatorChar + folderName;
                    File file = new File(path);
                    if (!file.exists()) {
                        file.mkdirs();
                    }
                }
                String packageName = ConfigTools.getPackageName(path);
                List<JavaBeanData> javaBeanDataList = DatabaseQueryTool.getDataList(connData, selectedTables);
                Template template = tool.getTemplate4Bean();
                template.binding("curDate", dateFmt);
                template.binding("curYear", c.get(Calendar.YEAR));
                template.binding("packageName", packageName);
                this.createBeanFiles(template, javaBeanDataList, path);
            }

            if (radioRepository.isSelected()) {
                String path = ConfigTools.getFolderPath();
                if (isNewRepoFolder.isSelected()) {
                    String folderName = folderRepoName.getText().length() == 0 ? TemplateTool.DEFAULT_REPOSITORY_FOLDER : folderRepoName.getText();
                    path = path + File.separatorChar + folderName;
                    File file = new File(path);
                    if (!file.exists()) {
                        file.mkdirs();
                    }
                }
                String packageName = ConfigTools.getPackageName(path);
                Template template = tool.getTemplate4Repository();
                template.binding("curDate", dateFmt);
                template.binding("curYear", c.get(Calendar.YEAR));
                template.binding("packageName", packageName);
                template.binding("beanPackageName", ConfigTools.replaceLastPackageName(packageName, TemplateTool.DEFAULT_BEAN_FOLDER));
                this.createRepositoryFiles(template, selectedTables, path);
            }

            if (radioService.isSelected()) {
                String path = ConfigTools.getFolderPath();
                if (isNewServiceFolder.isSelected()) {
                    String folderName = folderServiceName.getText().length() == 0 ? TemplateTool.DEFAULT_SERVICE_FOLDER : folderServiceName.getText();
                    path = path + File.separatorChar + folderName;
                    File file = new File(path);
                    if (!file.exists()) {
                        file.mkdirs();
                    }
                }
                String packageName = ConfigTools.getPackageName(path);
                Template template = tool.getTemplate4Service();
                template.binding("curDate", dateFmt);
                template.binding("curYear", c.get(Calendar.YEAR));
                template.binding("packageName", packageName);
                template.binding("beanPackageName", ConfigTools.replaceLastPackageName(packageName, TemplateTool.DEFAULT_BEAN_FOLDER));
                template.binding("repositoryPackageName", ConfigTools.replaceLastPackageName(packageName, TemplateTool.DEFAULT_REPOSITORY_FOLDER));
                this.createServiceFiles(template, selectedTables, path, "Service.java");
                this.createServiceFiles(template, selectedTables, path, "ServiceImpl.java");
            }

            this.finish("生成文件成功。");
        } catch (Exception ex) {
            ex.printStackTrace();
            this.showError(ex.toString());
        }
    }

    /**
     * 生成service serviceImpl 文件
     * 
     * @param template
     * @param selectedTables
     * @param path
     */
    private void createServiceFiles(Template template, ListModel<String> selectedTables, String path, String type) {
        BufferedWriter writer = null;
        try {
            for (int i = 0; i < selectedTables.getSize(); i++) {
                String tabNameFmt = ConfigTools.toJavaClassName(selectedTables.getElementAt(i));
                template.binding("tabNameFmt", tabNameFmt);

                String filePath = path + File.separatorChar + tabNameFmt + type;
                writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(filePath), TemplateTool.ENCODING));
                template.renderTo(writer);
                writer.flush();
            }
        } catch (IOException e) {
            e.printStackTrace();
            showError("异常信息：" + e.toString());
        } finally {
            if (writer != null) {
                try {
                    writer.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    /**
     * 生成repository文件
     * 
     * @param template
     * @param selectedTables
     * @param path
     */
    private void createRepositoryFiles(Template template, ListModel<String> selectedTables, String path) {
        BufferedWriter writer = null;
        try {
            for (int i = 0; i < selectedTables.getSize(); i++) {
                String tabNameFmt = ConfigTools.toJavaClassName(selectedTables.getElementAt(i));
                template.binding("tabNameFmt", tabNameFmt);

                String filePath = path + File.separatorChar + tabNameFmt + "Repository.java";
                writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(filePath), TemplateTool.ENCODING));
                template.renderTo(writer);
                writer.flush();
            }
        } catch (IOException e) {
            e.printStackTrace();
            showError("异常信息：" + e.toString());
        } finally {
            if (writer != null) {
                try {
                    writer.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    /**
     * 生成文件
     * 
     * @param template4Bean
     * @param javaBeanDataList
     * @param rootPath
     */
    private void createBeanFiles(Template template4Bean, List<JavaBeanData> javaBeanDataList, String rootPath) {
        BufferedWriter writer = null;
        try {
            for (JavaBeanData javaBeanData : javaBeanDataList) {
                template4Bean.binding("javaBeanData", javaBeanData);
                // 生成的Java文件路径
                String filePath = rootPath + File.separatorChar + javaBeanData.getTableNameFmt() + ".java";
                writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(filePath), TemplateTool.ENCODING));
                template4Bean.renderTo(writer);
                writer.flush();
            }
        } catch (IOException e) {
            e.printStackTrace();
            showError("异常信息：" + e.toString());
        } finally {
            if (writer != null) {
                try {
                    writer.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }

    }

    private void showError(String error) {
        JOptionPane.showMessageDialog(this.getRootPane(), error);
    }

    private void finish(String done) {
        JFrame jf = (JFrame) this.getRootPane().getParent();
        JOptionPane.showMessageDialog(this.getRootPane(), done);
        jf.setVisible(false);
        ConfigTools.refreshLocal();
    }

    /**
     * 隐藏窗口，并返回第一个panel
     * 
     * @param evt
     */
    private void btnClose2ActionPerformed(java.awt.event.ActionEvent evt) {
        JFrame jf = (JFrame) this.getRootPane().getParent();
        jf.setVisible(false);
    }

    // Variables declaration - do not modify
    private javax.swing.JButton             btnClose2;
    private javax.swing.JButton             btnFinish;
    private javax.swing.JButton             btnPrevious;
    private javax.swing.JTextField          folderBeanName;
    private javax.swing.JTextField          folderRepoName;
    private javax.swing.JTextField          folderServiceName;
    private javax.swing.JCheckBox           isNewBeanFolder;
    private javax.swing.JCheckBox           isNewRepoFolder;
    private javax.swing.JCheckBox           isNewServiceFolder;
    private javax.swing.JLabel              labelSelected;
    private javax.swing.JLabel              labelTables;
    private javax.swing.JScrollPane         panelSelected;
    private javax.swing.JScrollPane         panelTables;
    private javax.swing.JRadioButton        radioJavaBean;
    private javax.swing.JRadioButton        radioRepository;
    private javax.swing.JRadioButton        radioService;
    private javax.swing.JList<String>       selectedList;
    // End of variables declaration
    public static javax.swing.JList<String> tablesList;
    public static ConnectionData            connData;

    private boolean                         javaBeanSelected   = true;
    private boolean                         repositorySelected = false;
    private boolean                         serviceSelected    = false;
}
